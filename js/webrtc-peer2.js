////////////
// Peer 2 //
////////////

let peer2connection = new RTCPeerConnection();

let peer2datachannel;

// when the signaling server sends something to peer2, parse it and react
function peer2SignalHandler(signal) {

	message = JSON.parse(signal);

	switch (message.messageType) {

		case "data-offer":
			// handle data offer
			peer2HandleDataOffer(message);
			break;
		case 'ice-candidate':
			//handle ice candidate
			peer2HandleIceCandidate(message);
			break;
		default:
			console.log("PEER 2: We got something from the server but we don't know what it is!");
			console.log("Take a look for yourself:", signal);
	}
}


// handle data offer delivered by signal server
function peer2HandleDataOffer(message) {

	// set the remote description as the offer session description
	peer2connection.setRemoteDescription(message.sessionDescription);

	// create an answer to send back to peer 1 via the signaling server
	peer2connection.createAnswer().then((AnswerRTCSessionDescription) => {

		// set the localdescription as the answer
		// setting Local Description triggers the peer2connection.onicecandidate event!!
		peer2connection.setLocalDescription(AnswerRTCSessionDescription);


		// Prepare a message to send to peer 2
		let message = {	source: 'Peer2',
						destination: 'Peer1',
						messageType: 'data-answer',
						sessionDescription: AnswerRTCSessionDescription
					};

		// send AnswerRTCSessionDescription to peer1 via signaling server
		peer2SendMessageViaSignalingServer(message)

	});
}


// handle ice candidate delivered by signal server from peer 1
function peer2HandleIceCandidate(message) {

	// get the candidate from the message
	let candidate = message.candidate;

	// add the ice candidate to the connection
	peer2connection.addIceCandidate(candidate).then(() =>

		// it worked!
		() => console.log('PEER 2: Yay, we added a candidate.'),

		// it didn't work!
		err => {
			console.log('PEER 2: Oh no! We failed to add the candidate');
			console.log("Here's the error:", err);
		});
}


// handle the onicecandidate events generated by setting of local description
peer2connection.onicecandidate = event => {

	// prepare a message to send to peer 2
	let message = { source: 'Peer2',
					destination: 'Peer1',
					messageType: 'ice-candidate',
					candidate: event.candidate
				};

	peer2SendMessageViaSignalingServer(message);
}



// function peer2 uses to pass messages to signaling server 
function peer2SendMessageViaSignalingServer(message) {

	// convert to string to send over our pretend network
	let payload = JSON.stringify(message)

	// server receives payload string. wow what great connection speed!
	parseSignal(payload);
}

// once data channel is created by peer1, peer2 should do something about it
peer2connection.ondatachannel = event => {

	// create data channel object for peer 2
	peer2datachannel = event.channel;


	// some data channel handlers for peer 1
	peer2datachannel.onopen = event => {
		console.log("PEER 2: Hey, my data channel was opened!");
		console.log("Use the command peer2datachannel.send() to send something to Peer 1");
	}

	peer2datachannel.onclose = event => {
		console.log("PEER 2: Hey, my data channel was closed!");
	}

	peer2datachannel.onmessage = event => {
		console.log("PEER 2: Hey, I just got this message:");
		console.log(event.data);
	}


}