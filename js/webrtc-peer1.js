////////////
// Peer 1 //
////////////

// begin by creating an RTCPeerConnection
let peer1connection = new RTCPeerConnection();

// we need a data channel (as opposed to video or audio) for this demo!
let peer1datachannel = peer1connection.createDataChannel('myFirstDataChannel')

// now let's create an offer to send to peer2
peer1connection.createOffer().then((OfferRTCSessionDescription) => {

	// peer1, the offerer, will set the offer to be its Local Description
	// setting Local Description triggers the peer1connection.onicecandidate event!!
	peer1connection.setLocalDescription(OfferRTCSessionDescription);

	// Prepare a message to send to peer 2
	let message = {	source: 'Peer1',
					destination: 'Peer2',
					messageType: 'data-offer',
					sessionDescription: OfferRTCSessionDescription
				};

	// send OfferRTCSessionDescription to peer2 via signaling server
	peer1SendMessageViaSignalingServer(message);
})


// function peer1 uses to pass messages to signaling server 
function peer1SendMessageViaSignalingServer(message) {

	// convert to string to send over our pretend network
	let payload = JSON.stringify(message)

	// server receives payload string. wow what great connection speed!
	parseSignal(payload);
}


// handle the onicecandidate events generated by setting of local description
peer1connection.onicecandidate = event => {

	// prepare a message to send to peer 2
	let message = { source: 'Peer1',
					destination: 'Peer2',
					messageType: 'ice-candidate',
					candidate: event.candidate
				};

	peer1SendMessageViaSignalingServer(message);
}



// when the signaling server sends something to peer1, parse it and react
function peer1SignalHandler(signal) {

	message = JSON.parse(signal);

	switch (message.messageType) {

		case 'data-answer':
			// handle data offer
			peer1HandleDataAnswer(message);
			break;
		case 'ice-candidate':
			//handle ice candidate
			peer1HandleIceCandidate(message);
			break;
		default:
			console.log("PEER 1: We got something from the server but we don't know what it is!");
			console.log("Take a look for yourself:", signal);
	}
}


// handle ice candidate delivered by signal server from peer 2
function peer1HandleIceCandidate(message) {

	// get the candidate from the message
	let candidate = message.candidate;

	// add the ice candidate to the connection
	peer1connection.addIceCandidate(candidate).then(() =>

		// it worked!
		() => console.log('PEER 1: Yay, we added a candidate.'),

		// it didn't work!
		err => {
			console.log('PEER 1: Oh no! We failed to add the candidate');
			console.log("Here's the error:", err);
		});
}


// handle data offer delivered by signal server
function peer1HandleDataAnswer(message) {

	// set the remote description as the offer session description
	peer1connection.setRemoteDescription(message.sessionDescription);
}




// some data channel handlers for peer 1
peer1datachannel.onopen = event => {
	console.log("PEER 1: Hey, my data channel was opened!");
	console.log("Use the command peer1datachannel.send() to send something to Peer 2");
}

peer1datachannel.onclose = event => {
	console.log("PEER 1: Hey, my data channel was closed!");
}

peer1datachannel.onmessage = event => {
	console.log("PEER 1: Hey, I just got this message:");
	console.log(event.data);
}


